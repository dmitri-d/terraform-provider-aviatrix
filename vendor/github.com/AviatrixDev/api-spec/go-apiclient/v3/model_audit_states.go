/*
api spec

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
	"fmt"
)

// AuditStates the model 'AuditStates'
type AuditStates string

// List of audit_states
const (
	PASS AuditStates = "Pass"
	FAIL AuditStates = "Fail"
)

// All allowed values of AuditStates enum
var AllowedAuditStatesEnumValues = []AuditStates{
	"Pass",
	"Fail",
}

func (v *AuditStates) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuditStates(value)
	for _, existing := range AllowedAuditStatesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuditStates", value)
}

// NewAuditStatesFromValue returns a pointer to a valid AuditStates
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuditStatesFromValue(v string) (*AuditStates, error) {
	ev := AuditStates(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuditStates: valid values are %v", v, AllowedAuditStatesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuditStates) IsValid() bool {
	for _, existing := range AllowedAuditStatesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to audit_states value
func (v AuditStates) Ptr() *AuditStates {
	return &v
}

type NullableAuditStates struct {
	value *AuditStates
	isSet bool
}

func (v NullableAuditStates) Get() *AuditStates {
	return v.value
}

func (v *NullableAuditStates) Set(val *AuditStates) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditStates) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditStates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditStates(val *AuditStates) *NullableAuditStates {
	return &NullableAuditStates{value: val, isSet: true}
}

func (v NullableAuditStates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditStates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

