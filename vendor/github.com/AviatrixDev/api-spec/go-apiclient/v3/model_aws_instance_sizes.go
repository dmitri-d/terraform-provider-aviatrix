/*
api spec

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
	"fmt"
)

// AwsInstanceSizes the model 'AwsInstanceSizes'
type AwsInstanceSizes string

// List of aws_instance_sizes
const (
	T2_MICRO AwsInstanceSizes = "t2.micro"
	T2_SMALL AwsInstanceSizes = "t2.small"
	T3_SMALL AwsInstanceSizes = "t3.small"
)

// All allowed values of AwsInstanceSizes enum
var AllowedAwsInstanceSizesEnumValues = []AwsInstanceSizes{
	"t2.micro",
	"t2.small",
	"t3.small",
}

func (v *AwsInstanceSizes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsInstanceSizes(value)
	for _, existing := range AllowedAwsInstanceSizesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsInstanceSizes", value)
}

// NewAwsInstanceSizesFromValue returns a pointer to a valid AwsInstanceSizes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsInstanceSizesFromValue(v string) (*AwsInstanceSizes, error) {
	ev := AwsInstanceSizes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsInstanceSizes: valid values are %v", v, AllowedAwsInstanceSizesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsInstanceSizes) IsValid() bool {
	for _, existing := range AllowedAwsInstanceSizesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to aws_instance_sizes value
func (v AwsInstanceSizes) Ptr() *AwsInstanceSizes {
	return &v
}

type NullableAwsInstanceSizes struct {
	value *AwsInstanceSizes
	isSet bool
}

func (v NullableAwsInstanceSizes) Get() *AwsInstanceSizes {
	return v.value
}

func (v *NullableAwsInstanceSizes) Set(val *AwsInstanceSizes) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsInstanceSizes) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsInstanceSizes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsInstanceSizes(val *AwsInstanceSizes) *NullableAwsInstanceSizes {
	return &NullableAwsInstanceSizes{value: val, isSet: true}
}

func (v NullableAwsInstanceSizes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsInstanceSizes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

