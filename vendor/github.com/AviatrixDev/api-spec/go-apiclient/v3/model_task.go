/*
api spec

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
	"time"
)

// Task struct for Task
type Task struct {
	ResourceName *string `json:"resource_name,omitempty"`
	ResourceType *string `json:"resource_type,omitempty"`
	Action *string `json:"action,omitempty"`
	CreationTime *time.Time `json:"creation_time,omitempty"`
	MaxEvents *int32 `json:"max_events,omitempty"`
	ProcessedEvents *int32 `json:"processed_events,omitempty"`
	Progress *int32 `json:"progress,omitempty"`
	Events *[]TaskEvents `json:"events,omitempty"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask() *Task {
	this := Task{}
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *Task) GetResourceName() string {
	if o == nil || o.ResourceName == nil {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetResourceNameOk() (*string, bool) {
	if o == nil || o.ResourceName == nil {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *Task) HasResourceName() bool {
	if o != nil && o.ResourceName != nil {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *Task) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *Task) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *Task) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *Task) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *Task) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Task) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *Task) SetAction(v string) {
	o.Action = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *Task) GetCreationTime() time.Time {
	if o == nil || o.CreationTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || o.CreationTime == nil {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *Task) HasCreationTime() bool {
	if o != nil && o.CreationTime != nil {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *Task) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetMaxEvents returns the MaxEvents field value if set, zero value otherwise.
func (o *Task) GetMaxEvents() int32 {
	if o == nil || o.MaxEvents == nil {
		var ret int32
		return ret
	}
	return *o.MaxEvents
}

// GetMaxEventsOk returns a tuple with the MaxEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetMaxEventsOk() (*int32, bool) {
	if o == nil || o.MaxEvents == nil {
		return nil, false
	}
	return o.MaxEvents, true
}

// HasMaxEvents returns a boolean if a field has been set.
func (o *Task) HasMaxEvents() bool {
	if o != nil && o.MaxEvents != nil {
		return true
	}

	return false
}

// SetMaxEvents gets a reference to the given int32 and assigns it to the MaxEvents field.
func (o *Task) SetMaxEvents(v int32) {
	o.MaxEvents = &v
}

// GetProcessedEvents returns the ProcessedEvents field value if set, zero value otherwise.
func (o *Task) GetProcessedEvents() int32 {
	if o == nil || o.ProcessedEvents == nil {
		var ret int32
		return ret
	}
	return *o.ProcessedEvents
}

// GetProcessedEventsOk returns a tuple with the ProcessedEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetProcessedEventsOk() (*int32, bool) {
	if o == nil || o.ProcessedEvents == nil {
		return nil, false
	}
	return o.ProcessedEvents, true
}

// HasProcessedEvents returns a boolean if a field has been set.
func (o *Task) HasProcessedEvents() bool {
	if o != nil && o.ProcessedEvents != nil {
		return true
	}

	return false
}

// SetProcessedEvents gets a reference to the given int32 and assigns it to the ProcessedEvents field.
func (o *Task) SetProcessedEvents(v int32) {
	o.ProcessedEvents = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *Task) GetProgress() int32 {
	if o == nil || o.Progress == nil {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetProgressOk() (*int32, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *Task) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *Task) SetProgress(v int32) {
	o.Progress = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *Task) GetEvents() []TaskEvents {
	if o == nil || o.Events == nil {
		var ret []TaskEvents
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetEventsOk() (*[]TaskEvents, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *Task) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []TaskEvents and assigns it to the Events field.
func (o *Task) SetEvents(v []TaskEvents) {
	o.Events = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceName != nil {
		toSerialize["resource_name"] = o.ResourceName
	}
	if o.ResourceType != nil {
		toSerialize["resource_type"] = o.ResourceType
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.CreationTime != nil {
		toSerialize["creation_time"] = o.CreationTime
	}
	if o.MaxEvents != nil {
		toSerialize["max_events"] = o.MaxEvents
	}
	if o.ProcessedEvents != nil {
		toSerialize["processed_events"] = o.ProcessedEvents
	}
	if o.Progress != nil {
		toSerialize["progress"] = o.Progress
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	return json.Marshal(toSerialize)
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


