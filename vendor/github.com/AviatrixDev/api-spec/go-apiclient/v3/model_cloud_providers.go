/*
api spec

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
	"fmt"
)

// CloudProviders the model 'CloudProviders'
type CloudProviders string

// List of cloud_providers
const (
	AWS CloudProviders = "AWS"
	AZURE_ARM CloudProviders = "Azure ARM"
	G_CLOUD CloudProviders = "GCloud"
	ORACLE_CLOUD_INFRASTRUCTURE CloudProviders = "Oracle Cloud Infrastructure"
)

// All allowed values of CloudProviders enum
var AllowedCloudProvidersEnumValues = []CloudProviders{
	"AWS",
	"Azure ARM",
	"GCloud",
	"Oracle Cloud Infrastructure",
}

func (v *CloudProviders) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudProviders(value)
	for _, existing := range AllowedCloudProvidersEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudProviders", value)
}

// NewCloudProvidersFromValue returns a pointer to a valid CloudProviders
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudProvidersFromValue(v string) (*CloudProviders, error) {
	ev := CloudProviders(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudProviders: valid values are %v", v, AllowedCloudProvidersEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudProviders) IsValid() bool {
	for _, existing := range AllowedCloudProvidersEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cloud_providers value
func (v CloudProviders) Ptr() *CloudProviders {
	return &v
}

type NullableCloudProviders struct {
	value *CloudProviders
	isSet bool
}

func (v NullableCloudProviders) Get() *CloudProviders {
	return v.value
}

func (v *NullableCloudProviders) Set(val *CloudProviders) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudProviders) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudProviders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudProviders(val *CloudProviders) *NullableCloudProviders {
	return &NullableCloudProviders{value: val, isSet: true}
}

func (v NullableCloudProviders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudProviders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

