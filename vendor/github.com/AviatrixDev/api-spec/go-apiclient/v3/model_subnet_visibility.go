/*
api spec

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
	"fmt"
)

// SubnetVisibility the model 'SubnetVisibility'
type SubnetVisibility string

// List of subnet_visibility
const (
	PRIVATE SubnetVisibility = "private"
	PUBLIC SubnetVisibility = "public"
)

// All allowed values of SubnetVisibility enum
var AllowedSubnetVisibilityEnumValues = []SubnetVisibility{
	"private",
	"public",
}

func (v *SubnetVisibility) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubnetVisibility(value)
	for _, existing := range AllowedSubnetVisibilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubnetVisibility", value)
}

// NewSubnetVisibilityFromValue returns a pointer to a valid SubnetVisibility
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubnetVisibilityFromValue(v string) (*SubnetVisibility, error) {
	ev := SubnetVisibility(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubnetVisibility: valid values are %v", v, AllowedSubnetVisibilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubnetVisibility) IsValid() bool {
	for _, existing := range AllowedSubnetVisibilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to subnet_visibility value
func (v SubnetVisibility) Ptr() *SubnetVisibility {
	return &v
}

type NullableSubnetVisibility struct {
	value *SubnetVisibility
	isSet bool
}

func (v NullableSubnetVisibility) Get() *SubnetVisibility {
	return v.value
}

func (v *NullableSubnetVisibility) Set(val *SubnetVisibility) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetVisibility) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetVisibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetVisibility(val *SubnetVisibility) *NullableSubnetVisibility {
	return &NullableSubnetVisibility{value: val, isSet: true}
}

func (v NullableSubnetVisibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetVisibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

